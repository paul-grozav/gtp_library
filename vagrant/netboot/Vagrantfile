# ============================================================================ #
# Authors:
# - Tancredi-Paul Grozav <paul@grozav.info>
# ============================================================================ #
# vagrant up gateway
# vagrant up Intel_x86PC__pxe_client
# vagrant destroy -f Intel_x86PC__pxe_client
# vagrant up EFI_IA32__pxe_client
# vagrant destroy -f EFI_IA32__pxe_client
# vagrant up EFI_x86-64__pxe_client
# vagrant destroy -f EFI_x86-64__pxe_client
# vagrant destroy -f gateway
#
# See also:
# 1. https://fogproject.org/download
# 2. https://www.iventoy.com/
# ============================================================================ #
# -*- mode: ruby -*-
# vi: set ft=ruby :
$network_address_prefix = '10.10.10'
# https://github.com/rgl/pxe-vagrant/blob/master/Vagrantfile

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
# ============================================================================ #
  # $ ssh -p 2222 \
  #     -o StrictHostKeyChecking=false -o UserKnownHostsFile=/dev/null \
  #     -i ./.vagrant/machines/gateway/virtualbox/private_key vagrant@127.0.0.1
  # $ ssh ...  sudo tcpdump -i eth1 -U -s0 -w - | sudo wireshark -k -i -
  # $ sudo true ; vagrant ssh gateway -- /usr/bin/sudo tcpdump -i eth1 -U -s0 -w - | sudo wireshark -k -i -
  config.vm.define "gateway" do |config|
    config.vm.hostname = 'gateway'
    config.vm.box = "debian/bookworm64"
    # These machines actually have 2 NICs. The first one is used as an IPMI
    # just for management, through vagrant. The second interface is actually
    # connecting them into that isolated_net_1, that they use for communication.
    # config.vm.network  "private_network", type: "dhcp"
    config.vm.network "private_network",
      mac: "080027000002",
      virtualbox__intnet: "isolated_net_1",
      type: "static",
      ip: "192.168.10.2"
    # config.vm.provision :shell, path: "vms/gateway/fs/mnt/gateway.sh", args: [$network_address_prefix]
    # config.vm.provision "file", source: "~/.gitconfig", destination: ".gitconfig"
    config.vm.synced_folder "vms/gateway/fs/mnt", "/mnt", :mount_options => ["ro"],
      owner: "root", group: "root"
    # config.vm.provision :shell, inline: "/bin/bash -c 'cp /mnt/start.sh /root/start.sh && bash /root/start.sh'", args: [$network_address_prefix]
    config.vm.provision :shell, inline: "/bin/bash /mnt/start.sh", args: [ $network_address_prefix ]
  end

# ============================================================================ #
  # config.vm.define "client" do |config|
  #   config.vm.hostname = "client"
  #   config.vm.box = "debian/bookworm64"
  #   config.vm.network "private_network",
  #     mac: "080027000003",
  #     virtualbox__intnet: "isolated_net_1",
  #     type: "static",
  #     ip: "192.168.10.3"
  # end
# ============================================================================ #


  # Ensure you stop and start the VM (not restart it) - to ensure the PXELINUX
  # Is loading the kernel from HTTP
  # Not clear if this is a 32-bit or 64-bit machine, but probably a 64-bit.
  # Anyway, both should be able to boot the same pxelinux.0 binary
  config.vm.define "Intel_x86PC__pxe_client" do |config|
    config.vm.box = "sridhav/empty"
    config.vm.network "private_network",
      mac: "080027000003",
      virtualbox__intnet: "isolated_net_1",
      type: "static",
      ip: "192.168.10.3"
    config.vm.synced_folder '.', '/vagrant', disabled: true
    #config.ssh.username="root"
    config.ssh.connect_timeout = 1
    config.vm.provider :virtualbox do |vb|
      # Display the VirtualBox GUI when booting the machine
      vb.gui = true
      vb.check_guest_additions = false
      # No shared folder
      vb.functional_vboxsf = false
      # https://docs.oracle.com/en/virtualization/virtualbox/6.0/user/vboxmanage-modifyvm.html
      # https://forums.fedoraforum.org/showthread.php?271743-Partitioning-errors-sda-must-have-a-gpt-disk-label&s=dbefdb7c0dfc762ebf765fe065ac889a&p=1525398#post1525398
      # https://www.redhat.com/sysadmin/pxe-boot-uefi
      vb.customize ['modifyvm', :id, '--boot1', 'net']
      #vb.customize ['modifyvm', :id, '--boot2', 'disk']
      #vb.customize ['modifyvm', :id, '--biospxedebug', 'on']
      vb.customize ['modifyvm', :id, '--cableconnected2', 'on']
      # Ensure we boot from NIC 2 (vagrant LAN) with highest priority(1)
      # For some reason it still boots from NIC1 first
      vb.customize ['modifyvm', :id, '--nicbootprio2', '1']
      # Must be an Intel card (as-of VB 5.1 we cannot Intel PXE boot from a
      # virtio-net card).
      vb.customize ['modifyvm', :id, "--nictype2", '82540EM']

      # vb.customize ['setextradata', :id, 'VBoxInternal/Devices/pcbios/0/Config/DmiSystemVendor',    'your vendor name here']
      # vb.customize ['setextradata', :id, 'VBoxInternal/Devices/pcbios/0/Config/DmiSystemProduct',   'your product name here']
      # vb.customize ['setextradata', :id, 'VBoxInternal/Devices/pcbios/0/Config/DmiSystemVersion',   'your product version here']
      # vb.customize ['setextradata', :id, 'VBoxInternal/Devices/pcbios/0/Config/DmiSystemSerial',    'your product serial number here']
      # vb.customize ['setextradata', :id, 'VBoxInternal/Devices/pcbios/0/Config/DmiSystemSKU',       'your product SKU here']
      # vb.customize ['setextradata', :id, 'VBoxInternal/Devices/pcbios/0/Config/DmiSystemUuid',      '00000000-0000-4000-8000-000000000001']
      # vb.customize ['setextradata', :id, 'VBoxInternal/Devices/pcbios/0/Config/DmiChassisVendor',   'your chassis vendor name here']
      # vb.customize ['setextradata', :id, 'VBoxInternal/Devices/pcbios/0/Config/DmiChassisType',     '1']
      # vb.customize ['setextradata', :id, 'VBoxInternal/Devices/pcbios/0/Config/DmiChassisVersion',  'your chassis version here']
      # vb.customize ['setextradata', :id, 'VBoxInternal/Devices/pcbios/0/Config/DmiChassisSerial',   'your chassis serial number here']
      # vb.customize ['setextradata', :id, 'VBoxInternal/Devices/pcbios/0/Config/DmiChassisAssetTag', 'your chassis asset tag here']
    end
  end



# ============================================================================ #


  # Ensure you stop and start the VM (not restart it) - to ensure the PXELINUX
  # Is loading the kernel from HTTP
  # EFI IA32 (32-bit EFI client)
  config.vm.define "EFI_IA32__pxe_client" do |config|
    config.vm.box = "sridhav/empty"
    config.vm.network "private_network",
      mac: "080027000004",
      virtualbox__intnet: "isolated_net_1",
      type: "static",
      ip: "192.168.10.4"
    config.vm.synced_folder '.', '/vagrant', disabled: true
    #config.ssh.username="root"
    config.ssh.connect_timeout = 1
    config.vm.provider :virtualbox do |vb|
      # Display the VirtualBox GUI when booting the machine
      vb.gui = true
      vb.check_guest_additions = false
      # No shared folder
      vb.functional_vboxsf = false
      # https://docs.oracle.com/en/virtualization/virtualbox/6.0/user/vboxmanage-modifyvm.html
      # https://forums.fedoraforum.org/showthread.php?271743-Partitioning-errors-sda-must-have-a-gpt-disk-label&s=dbefdb7c0dfc762ebf765fe065ac889a&p=1525398#post1525398
      # https://www.redhat.com/sysadmin/pxe-boot-uefi
      vb.customize ['modifyvm', :id, '--boot1', 'net']
      #vb.customize ['modifyvm', :id, '--boot2', 'disk']
      #vb.customize ['modifyvm', :id, '--biospxedebug', 'on']
      vb.customize ['modifyvm', :id, '--cableconnected2', 'on']
      # Ensure we boot from NIC 2 (vagrant LAN) with highest priority(1)
      # For some reason it still boots from NIC1 first
      vb.customize ['modifyvm', :id, '--nicbootprio2', '1']
      # Must be an Intel card (as-of VB 5.1 we cannot Intel PXE boot from a
      # virtio-net card).
      vb.customize ['modifyvm', :id, "--nictype2", '82540EM']
      # Specifies the firmware to be used to boot the VM: Available options are: BIOS, or one of the EFI options: efi, efi32, or efi64. Use EFI options with care.
      vb.customize ['modifyvm', :id, "--firmware", "efi32"]

      # vb.customize ['setextradata', :id, 'VBoxInternal/Devices/pcbios/0/Config/DmiSystemVendor',    'your vendor name here']
      # vb.customize ['setextradata', :id, 'VBoxInternal/Devices/pcbios/0/Config/DmiSystemProduct',   'your product name here']
      # vb.customize ['setextradata', :id, 'VBoxInternal/Devices/pcbios/0/Config/DmiSystemVersion',   'your product version here']
      # vb.customize ['setextradata', :id, 'VBoxInternal/Devices/pcbios/0/Config/DmiSystemSerial',    'your product serial number here']
      # vb.customize ['setextradata', :id, 'VBoxInternal/Devices/pcbios/0/Config/DmiSystemSKU',       'your product SKU here']
      # vb.customize ['setextradata', :id, 'VBoxInternal/Devices/pcbios/0/Config/DmiSystemUuid',      '00000000-0000-4000-8000-000000000001']
      # vb.customize ['setextradata', :id, 'VBoxInternal/Devices/pcbios/0/Config/DmiChassisVendor',   'your chassis vendor name here']
      # vb.customize ['setextradata', :id, 'VBoxInternal/Devices/pcbios/0/Config/DmiChassisType',     '1']
      # vb.customize ['setextradata', :id, 'VBoxInternal/Devices/pcbios/0/Config/DmiChassisVersion',  'your chassis version here']
      # vb.customize ['setextradata', :id, 'VBoxInternal/Devices/pcbios/0/Config/DmiChassisSerial',   'your chassis serial number here']
      # vb.customize ['setextradata', :id, 'VBoxInternal/Devices/pcbios/0/Config/DmiChassisAssetTag', 'your chassis asset tag here']
    end
  end



# ============================================================================ #


  # Ensure you stop and start the VM (not restart it) - to ensure the kernel is
  # loaded through the network
  # Enter boot manager and choose UEFI PXEv4 from the MAC ...0005
  # EFI x86-64 (64-bit EFI)
  config.vm.define "EFI_x86-64__pxe_client" do |config|
    config.vm.box = "sridhav/empty"
    config.vm.network "private_network",
      mac: "080027000005",
      virtualbox__intnet: "isolated_net_1",
      type: "static",
      ip: "192.168.10.5"
    config.vm.synced_folder '.', '/vagrant', disabled: true
    #config.ssh.username="root"
    config.ssh.connect_timeout = 1
    config.vm.provider :virtualbox do |vb|
      # Display the VirtualBox GUI when booting the machine
      vb.gui = true
      vb.check_guest_additions = false
      # No shared folder
      vb.functional_vboxsf = false
      # https://docs.oracle.com/en/virtualization/virtualbox/6.0/user/vboxmanage-modifyvm.html
      # https://forums.fedoraforum.org/showthread.php?271743-Partitioning-errors-sda-must-have-a-gpt-disk-label&s=dbefdb7c0dfc762ebf765fe065ac889a&p=1525398#post1525398
      # https://www.redhat.com/sysadmin/pxe-boot-uefi
      vb.customize ['modifyvm', :id, '--boot1', 'net']
      #vb.customize ['modifyvm', :id, '--boot2', 'disk']
      #vb.customize ['modifyvm', :id, '--biospxedebug', 'on']
      vb.customize ['modifyvm', :id, '--cableconnected2', 'on']
      # Ensure we boot from NIC 2 (vagrant LAN) with highest priority(1)
      # For some reason it still boots from NIC1 first
      vb.customize ['modifyvm', :id, '--nicbootprio2', '1']
      # Must be an Intel card (as-of VB 5.1 we cannot Intel PXE boot from a
      # virtio-net card).
      vb.customize ['modifyvm', :id, "--nictype2", '82540EM']
      # Specifies the firmware to be used to boot the VM: Available options are: BIOS, or one of the EFI options: efi, efi32, or efi64. Use EFI options with care.
      vb.customize ['modifyvm', :id, "--firmware", "efi64"]

      # vb.customize ['setextradata', :id, 'VBoxInternal/Devices/pcbios/0/Config/DmiSystemVendor',    'your vendor name here']
      # vb.customize ['setextradata', :id, 'VBoxInternal/Devices/pcbios/0/Config/DmiSystemProduct',   'your product name here']
      # vb.customize ['setextradata', :id, 'VBoxInternal/Devices/pcbios/0/Config/DmiSystemVersion',   'your product version here']
      # vb.customize ['setextradata', :id, 'VBoxInternal/Devices/pcbios/0/Config/DmiSystemSerial',    'your product serial number here']
      # vb.customize ['setextradata', :id, 'VBoxInternal/Devices/pcbios/0/Config/DmiSystemSKU',       'your product SKU here']
      # vb.customize ['setextradata', :id, 'VBoxInternal/Devices/pcbios/0/Config/DmiSystemUuid',      '00000000-0000-4000-8000-000000000001']
      # vb.customize ['setextradata', :id, 'VBoxInternal/Devices/pcbios/0/Config/DmiChassisVendor',   'your chassis vendor name here']
      # vb.customize ['setextradata', :id, 'VBoxInternal/Devices/pcbios/0/Config/DmiChassisType',     '1']
      # vb.customize ['setextradata', :id, 'VBoxInternal/Devices/pcbios/0/Config/DmiChassisVersion',  'your chassis version here']
      # vb.customize ['setextradata', :id, 'VBoxInternal/Devices/pcbios/0/Config/DmiChassisSerial',   'your chassis serial number here']
      # vb.customize ['setextradata', :id, 'VBoxInternal/Devices/pcbios/0/Config/DmiChassisAssetTag', 'your chassis asset tag here']
    end
  end



# ============================================================================ #


















  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  # config.vm.box = "alpine/alpine64"
  # config.vm.box = "debian/bookworm64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Disable the default share of the current code directory. Doing this
  # provides improved isolation between the vagrant box and your host
  # by making sure your Vagrantfile isn't accessible to the vagrant box.
  # If you use this you may want to enable additional shared subfolders as
  # shown above.
  # I don't want the node to have access to all these files
  config.vm.synced_folder ".", "/vagrant", disabled: true

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
end
# ============================================================================ #
