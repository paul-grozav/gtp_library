# ============================================================================ #
# Authors:
# - Tancredi-Paul Grozav <paul@grozav.info>
# ============================================================================ #
# vagrant up control-plane-1
# vagrant destroy -f control-plane-1
# vagrant up worker-1
# vagrant destroy -f worker-1
# ============================================================================ #
require "yaml"
vagrant_root = File.dirname(File.expand_path(__FILE__))
settings = YAML.load_file "#{vagrant_root}/settings.yml"

IP_SECTIONS = settings["network"]["control_ip"].match(/^([0-9.]+\.)([^.]+)$/)
# First 3 octets including the trailing dot:
IP_NW = IP_SECTIONS.captures[0]
# Last octet excluding all dots:
IP_START = Integer(IP_SECTIONS.captures[1])
NUM_WORKER_NODES = settings["nodes"]["workers"]["count"]
NUM_CONTROL_NODES = settings["nodes"]["control"]["count"]

Vagrant.configure("2") do |config|
  # These settings are going to apply to all boxes
  config.vm.provision "shell", path: "manage.sh",
    args: [ "--config-generic-box" ]

  if `uname -m`.strip == "aarch64"
    config.vm.box = settings["software"]["box"] + "-arm64"
  else
    config.vm.box = settings["software"]["box"]
  end
  config.vm.box_check_update = true

  # Create 1 Control plane VM
  config.vm.define "control-plane-1" do |node|
    node.vm.hostname = "control-plane-1"
    node.vm.network "private_network", ip: settings["network"]["control_ip"]

    # Mount additional shared folders from the host into each virtual machine.
    # Note that the project directory is automatically mounted at /vagrant.
#    if settings["shared_folders"]
#      settings["shared_folders"].each do |shared_folder|
#        node.vm.synced_folder shared_folder["host_path"],
#          shared_folder["vm_path"]
#      end
#    end

    node.vm.provider "virtualbox" do |vb|
      vb.cpus = settings["nodes"]["control"]["cpu"]
      vb.memory = settings["nodes"]["control"]["memory"]
      if settings["cluster_name"] and settings["cluster_name"] != ""
        vb.customize ["modifyvm", :id, "--groups",
          ("/" + settings["cluster_name"])]
      end
    end
  end

  # Might want to add multiple control planes nodes
  (2..NUM_CONTROL_NODES).each do |i|
    config.vm.define "control-plane-#{i}" do |node|
      node.vm.hostname = "control-plane-#{i}"
      node.vm.network "private_network", ip: IP_NW + "#{IP_START - 1 + i}"

      # Mount additional shared folders from the host into each virtual machine.
      # Note that the project directory is automatically mounted at /vagrant.
#      if settings["shared_folders"]
#        settings["shared_folders"].each do |shared_folder|
#          node.vm.synced_folder shared_folder["host_path"],
#            shared_folder["vm_path"]
#        end
#      end

       node.vm.provider "virtualbox" do |vb|
        vb.cpus = settings["nodes"]["control"]["cpu"]
        vb.memory = settings["nodes"]["control"]["memory"]
        if settings["cluster_name"] and settings["cluster_name"] != ""
          vb.customize ["modifyvm", :id, "--groups",
            ("/" + settings["cluster_name"])]
        end
      end
    end
  end

  # Create N worker nodes
  (1..NUM_WORKER_NODES).each do |i|
    config.vm.define "worker-#{i}" do |node|
      node.vm.hostname = "worker-#{i}"
      node.vm.network "private_network",
        ip: IP_NW + "#{IP_START - 1 + NUM_CONTROL_NODES + i}"

      # Mount additional shared folders from the host into each virtual machine.
      # Note that the project directory is automatically mounted at /vagrant.
#       if settings["shared_folders"]
#         settings["shared_folders"].each do |shared_folder|
#           node.vm.synced_folder shared_folder["host_path"],
#             shared_folder["vm_path"]
#         end
#       end

      node.vm.provider "virtualbox" do |vb|
        vb.cpus = settings["nodes"]["workers"]["cpu"]
        vb.memory = settings["nodes"]["workers"]["memory"]
        if settings["cluster_name"] and settings["cluster_name"] != ""
          vb.customize ["modifyvm", :id, "--groups",
            ("/" + settings["cluster_name"])]
        end
      end

      # Only install the dashboard after provisioning the last worker
#      if i == NUM_WORKER_NODES
        # At this point, the last worker was created
        # If dashboard is enabled, run the script
#        if settings["software"]["dashboard"] and
#          settings["software"]["dashboard"] != ""
#          node.vm.provision "shell", path: "scripts/dashboard.sh"
#        end
#      end # end last worker
    end # end do for worker
  end # end for each worker
end # end vagrant config
# ============================================================================ #
